name: Docker Push

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: users
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/users

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            sleep 1
          done
        env:
          PGPASSWORD: password

      - name: Execute init.sql
        run: psql "$DATABASE_URL" -f ./db/init.sql
        env:
          PGPASSWORD: password

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image for user-service
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          load: true
          tags: user-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:cache,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: user-service:latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Push Docker image
        if: success()
        run: |
          docker tag user-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: jpeg-project
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authenticate gcloud with service account
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > "${HOME}/gcloud-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcloud-key.json"
          gcloud config set account $(gcloud auth list --filter=status:ACTIVE --format="value(account)")

      - name: Install gke-gcloud-auth-plugin
        run: |
          # Install the plugin using gcloud components
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials jpeg-cluster \
            --region europe-west4

      - name: Restart Kubernetes deployment
        run: |
          kubectl rollout restart deployment user-service-deployment \
            --namespace=default