name: Docker Push and Test

on:
  push:
    branches:
      - main

jobs:
  test-build-and-push:
    runs-on: ubuntu-latest

    services:
      test_db:
        image: postgres:15 
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: users
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ====================================================================
      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          
          counter=0
          until PGPASSWORD=password pg_isready -h test_db -p 5432 -U "postgres" -d "users"; do
            sleep 1
            counter=$((counter + 1))
            if [ $counter -gt 30 ]; then
              echo "Timeout: PostgreSQL is not ready after 30 seconds."
              exit 1
            fi
            echo "Waiting for PostgreSQL... ($counter/30)"
          done
          echo "PostgreSQL is ready!"
      # ====================================================================

      - name: Run tests
        env:
          DB_HOST_TEST: test_db
          DB_PORT_TEST: 5432  
          DB_USER_TEST: postgres
          DB_PASSWORD_TEST: password
          DB_NAME_TEST: users
          JWT_SECRET: 'a-secure-secret-for-testing'
        run: npm test

      - name: Set up Docker Buildx
        if: success() 
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: success() 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for user-service
        if: success() 
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/user-service:cache,mode=max